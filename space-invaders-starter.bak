;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname space-invaders-starter) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/universe)
(require 2htdp/image)

;; Space Invaders


;; Constants:

(define WIDTH  300)
(define HEIGHT 500)

(define INVADER-X-SPEED 1.5)  ;speeds (not velocities) in pixels per tick
(define INVADER-Y-SPEED 1.5)
(define TANK-SPEED 2)
(define MISSILE-SPEED 10)

(define HIT-RANGE 10)

(define INVADE-RATE 113)

(define BACKGROUND (empty-scene WIDTH HEIGHT))

(define INVADER
  (overlay/xy (ellipse 10 15 "outline" "blue")              ;cockpit cover
              -5 6
              (ellipse 20 10 "solid"   "blue")))            ;saucer
(define INVADER-HEIGHT/2 (/ (image-height INVADER) 2))
(define INVADER-WIDTH/2 (/ (image-width INVADER) 2))

(define TANK
  (overlay/xy (overlay (ellipse 28 8 "solid" "black")       ;tread center
                       (ellipse 30 10 "solid" "green"))     ;tread outline
              5 -14
              (above (rectangle 5 10 "solid" "black")       ;gun
                     (rectangle 20 10 "solid" "black"))))   ;main body

(define TANK-HEIGHT/2 (/ (image-height TANK) 2))
(define TANK-Y (- HEIGHT TANK-HEIGHT/2))
(define TANK-WIDTH/2 (/ (image-width TANK) 2))

(define MISSILE (ellipse 5 15 "solid" "red"))
(define MISSILE-HEIGHT/2 (/ (image-height MISSILE) 2))



;; Data Definitions:

(define-struct game (invaders missiles tank))
;; Game is (make-game  (listof Invader) (listof Missile) Tank)
;; interp. the current state of a space invaders game
;;         with the current invaders, missiles and tank position

;; Game constants defined below Missile data definition

#;
(define (fn-for-game s)
  (... (fn-for-loinvader (game-invaders s))
       (fn-for-lom (game-missiles s))
       (fn-for-tank (game-tank s))))



(define-struct tank (x dir))
;; Tank is (make-tank Number Integer[-1, 1])
;; interp. the tank location is x, HEIGHT - TANK-HEIGHT/2 in screen coordinates
;;         the tank moves TANK-SPEED pixels per clock tick left if dir -1, right if dir 1

(define T0 (make-tank (/ WIDTH 2) 1))   ;center going right
(define T1 (make-tank 50 1))            ;going right
(define T2 (make-tank 50 -1))           ;going left

#;
(define (fn-for-tank t)
  (... (tank-x t) (tank-dir t)))



(define-struct invader (x y dir))
;; Invader is (make-invader Number Number Number)
;; interp. the invader is at (x, y) in screen coordinates
;;         the invader moves INVADER-X-SPEED pixels per clock tick left if dir -1, right if dir 1

(define I1 (make-invader 150 100 1))           ;not landed, moving right
(define I2 (make-invader 150 HEIGHT -1))       ;exactly landed, moving left
(define I3 (make-invader 150 (+ HEIGHT 10) 1)) ;> landed, moving right


#;
(define (fn-for-invader invader)
  (... (invader-x invader) (invader-y invader) (invader-dir invader)))


(define-struct missile (x y))
;; Missile is (make-missile Number Number)
;; interp. the missile's location is x y in screen coordinates

(define M1 (make-missile 150 300))                       ;not hit U1
(define M2 (make-missile (invader-x I1) (+ (invader-y I1) 10)))  ;exactly hit U1
(define M3 (make-missile (invader-x I1) (+ (invader-y I1)  5)))  ;> hit U1
(define M4 (make-missile 200 300))
(define M5 (make-missile 50 70))

#;
(define (fn-for-missile m)
  (... (missile-x m) (missile-y m)))



(define G0 (make-game empty empty T0))
(define G1 (make-game empty empty T1))
(define G2 (make-game (list I1) (list M1) T1))
(define G3 (make-game (list I1 I2) (list M1 M2) T1))


;; ListOfInvader is one of:
;;  - empty
;;  - (cons Invader ListOfInvader)
;; interp. a list of invaders
(define LOI1 empty)
(define LOI2 (list I1 I2 I3))
(define LOI3 (list I1))
(define LOI4 (list I1 I2))


#;
(define (fn-for-loinvader loinvader)
  (cond [(empty? loinvader) (...)]
        [else
         (... (fn-for-invader (first loinvader))
              (fn-for-loinvader (rest loinvader)))]))


;; ListOfMissile is one of:
;;  - empty
;;  - (cons Missile ListOfMissile)
;; interp. a list of missiles
(define LOM1 empty)
(define LOM2 (list M1 M2 M3))
(define LOM3 (list M1))
(define LOM4 (list M1 M2))


#;
(define (fn-for-lom lom)
  (cond [(empty? lom) (...)]
        [else
         (... (fn-for-missile (first lom))
              (fn-for-lom (rest lom)))]))




;; Function

;; Game -> Game
;; start the world with (main (make-game empty empty T0)) 
(define (main s)
  (big-bang s                             ; Game
    (on-tick   next-game)                 ; Game -> Game
    (to-draw   render-game)               ; Game -> Image
    (stop-when end-game? game-over)       ; Game -> Boolean, Game -> Image
    (on-key    handle-key)))              ; Game KeyEvent -> Game



;; Game -> Game
;; produce the next state of space invader game
(check-expect (next-game G0) (filter-collision (make-game (next-loinvader (game-invaders G0))
                                                          (next-lom (game-missiles G0))
                                                          (next-tank (game-tank G0)))))
(check-expect (next-game G2) (filter-collision (make-game (next-loinvader (game-invaders G2))
                                                          (next-lom (game-missiles G2))
                                                          (next-tank (game-tank G2)))))
(check-expect (next-game G3) (filter-collision (make-game (next-loinvader (game-invaders G3))
                                                          (next-lom (game-missiles G3))
                                                          (next-tank (game-tank G3)))))
            
;(define (next-game s) s) ;stub
;<use template from Game>

(define (next-game s)
  (filter-collision (make-game (next-loinvader (game-invaders s))
                               (next-lom (game-missiles s))
                               (next-tank (game-tank s)))))



;; Game -> Game
;; filter the invaders and missiles that have collided together
(check-expect (filter-collision G0) G0) ; no invaders or missiles
(check-expect (filter-collision G2) G2) ; the missile did not hit the invader
(check-expect (filter-collision G3) (make-game (list I2) (list M1) T1)) ; missile M2 hit the invader I1

;(define (filter-collision s) s) ;stub
;<use template from Game>

(define (filter-collision s)
  (make-game (filter-invaders (game-invaders s) (game-missiles s))
             (filter-missiles (game-missiles s) (game-invaders s))
             (game-tank s)))



;; ListOfInvader ListOfMissile -> ListOfInvaders
;; filter out invaders that have been hit by the missiles in ListOfMissiles
(check-expect (filter-invaders empty empty) empty)   ; no invaders or missiles
(check-expect (filter-invaders LOI2 empty) LOI2)     ; no missiles
(check-expect (filter-invaders empty LOM2) empty)    ; no invaders
(check-expect (filter-invaders LOI3 LOM3) LOI3)      ; no hit
(check-expect (filter-invaders LOI4 LOM4) (list I2)) ; invader I1 is hit

;(define (filter-invaders loinvader lom) loinvader) ;stub
; <use template from ListOfInvader and ListOfMissile>

(define (filter-invaders loinvader lom)
  (cond [(empty? loinvader) empty]
        [(empty? lom) loinvader]
        [else
         (if  (invader-survive? (first loinvader) lom)
              (cons (first loinvader) (filter-invaders (rest loinvader) lom))
              (filter-invaders (rest loinvader) lom))]))



;; Invader ListOfMissile -> Boolean
;; produce true if the invader is not hit by any one of the missiles in ListOfMissile
(check-expect (invader-survive? I1 empty) true)
(check-expect (invader-survive? I1 LOM3) true)
(check-expect (invader-survive? I1 LOM4) false) ; invader I1 hit by missle M2

;(define (invader-survive? invader lom) true) ;stub
;<use template from Invader and ListOfMissile>

(define (invader-survive?  invader lom)
  (cond [(empty? lom) true]
        [else
         (and (no-hit? invader (first lom))
              (invader-survive? invader (rest lom)))]))



;; Invader Missile -> Boolean
;; produce true if the invader and the missile did not hit
(check-expect (no-hit? I1 M1) true)
(check-expect (no-hit? I1 M2) false)

;(define (hit? invader m) true) ;stub
;<use template from Invader and Missile>

(define (no-hit? invader m)
  (not (and (<= (- (invader-x invader) INVADER-WIDTH/2)
                (missile-x m)
                (+ (invader-x invader) INVADER-WIDTH/2))
            (<= (- (invader-y invader) HIT-RANGE)
                (missile-y m)
                (+ (invader-y invader) HIT-RANGE)))))



;; ListOfMissiles ListOfInvaders -> ListOfMissiles
;; filter out missiles that have hit the missiles in ListOfInvaders
(check-expect (filter-missiles empty empty) empty)    ; no invaders or missiles
(check-expect (filter-missiles empty LOI2) empty)     ; no missiles
(check-expect (filter-missiles LOM2 empty) LOM2)      ; no invaders
(check-expect (filter-missiles LOM3 LOI3) LOM3)       ; no hit
(check-expect (filter-missiles LOM4 LOI4) (list M1))  ; M2 hit I1

;(define (filter-missiles lom loinvader) lom) ;stub
; <use template from ListOfMissile and ListOfInvader>

(define (filter-missiles lom loinvader)
  (cond [(empty? lom) empty]
        [(empty? loinvader) lom]
        [else
         (if  (missile-survive? (first lom) loinvader)
              (cons (first lom) (filter-missiles (rest lom) loinvader))
              (filter-missiles (rest lom) loinvader))]))



;; Missile ListOfInvader -> Boolean
;; produce true if the missile did not hit by any one of the invaders in ListOfInvader
(check-expect (missile-survive? M1 empty) true)
(check-expect (missile-survive? M1 LOI3) true)
(check-expect (missile-survive? M2 LOI4) false) ; missile M2 hit invader I1

;(define (missile-survive? missile loinvader) true) ;stub
;<use template from Missile and ListOfInvader>

(define (missile-survive?  missile loinvader)
  (cond [(empty? loinvader) true]
        [else
         (and (no-hit? (first loinvader) missile)
              (missile-survive? missile (rest loinvader)))]))



;; ListOfInvader -> ListOfInvader
;; produce next state of list of invaders
(check-expect (next-loinvader empty) empty)
(check-expect (next-loinvader (list (make-invader 150 100 1)))
              (list (make-invader (+ 150 (* INVADER-X-SPEED 1)) (+ 100 INVADER-Y-SPEED) 1))) ; invader moving right
(check-expect (next-loinvader (list (make-invader 150 100 1)
                                    (make-invader 200 150 -1)))
              (list (make-invader (+ 150 (* INVADER-X-SPEED  1)) (+ 100 INVADER-Y-SPEED)  1)
                    (make-invader (+ 200 (* INVADER-X-SPEED -1)) (+ 150 INVADER-Y-SPEED) -1))) ; invaders moving left and right

;(define (next-loinvader loinvader) loinvader) ;stub
;<use template from ListOfInvader>

(define (next-loinvader loinvader)
  (add-random-invader (tick-invaders loinvader)))




;; ListOfInvader -> ListOfInvader
;; produce the next tickled list of invaders
(check-expect (tick-invaders empty) empty)
(check-expect (tick-invaders (list (make-invader 150 100 1)))
              (list (make-invader (+ 150 (* INVADER-X-SPEED 1)) (+ 100 INVADER-Y-SPEED) 1)))   ; invader moving right
(check-expect (tick-invaders (list (make-invader 150 100 1)
                                   (make-invader 150 100 -1)))
              (list (make-invader (+ 150 (* INVADER-X-SPEED 1)) (+ 100 INVADER-Y-SPEED) 1)
                    (make-invader (+ 150 (* INVADER-X-SPEED -1)) (+ 100 INVADER-Y-SPEED) -1))) ; invaders moving left and right
(check-expect (tick-invaders (list (make-invader INVADER-WIDTH/2 100 -1)))
              (list (make-invader INVADER-WIDTH/2 100 1)))                                     ; invader touch left wall
(check-expect (tick-invaders (list (make-invader (- WIDTH INVADER-WIDTH/2) 100 1)))
              (list (make-invader (- WIDTH INVADER-WIDTH/2) 100 -1)))                          ; invader touch right wall

;(define (tick-invaders loinvader) loinvader) ;stub
;<ust template from ListOfInvader

(define (tick-invaders loinvader)
  (cond [(empty? loinvader) empty]
        [else
         (cons (advance-invader (first loinvader))
               (tick-invaders (rest loinvader)))]))



;; Invader -> Invader
;; advance the invader to the appropriate position in next tick
(check-expect (advance-invader (make-invader 150 100 1))
              (make-invader (+ 150 (* INVADER-X-SPEED 1)) (+ 100 INVADER-Y-SPEED) 1))   ; invader moving right
(check-expect (advance-invader (make-invader 150 100 -1))
              (make-invader (+ 150 (* INVADER-X-SPEED -1)) (+ 100 INVADER-Y-SPEED) -1)) ; invader moving left
(check-expect (advance-invader (make-invader INVADER-WIDTH/2 100 -1))
              (make-invader INVADER-WIDTH/2 100 1))                                     ; invader touch left wall
(check-expect (advance-invader (make-invader (- WIDTH INVADER-WIDTH/2) 100 1))
              (make-invader (- WIDTH INVADER-WIDTH/2) 100 -1))                          ; invader touch right wall

;(define (advance-invader invader) invader) ;stub
;<use template from Invader>

(define (advance-invader invader)
  (cond [(<= INVADER-WIDTH/2 (+ (invader-x invader) (* INVADER-X-SPEED (invader-dir invader))) (- WIDTH INVADER-WIDTH/2))
         (make-invader (+ (invader-x invader) (* INVADER-X-SPEED (invader-dir invader)))
                       (+ (invader-y invader) INVADER-Y-SPEED)
                       (invader-dir invader))]       ; middle
        [else
         (make-invader (invader-x invader)
                       (invader-y invader)
                       (- (invader-dir invader)))])) ; touch the wall



;; ListOfInvader -> ListOfInvader
;; randomly add a invader (random x coordinate, top of the screen) to the given list
(check-expect (add-random-invader empty) empty) ; can not test with check-expect
(check-expect (add-random-invader LOI2) LOI2)

;(define (add-random-invader loinvader) loinvader) ;stub
;<use template from ListOfInvader>

(define (add-random-invader loinvader)
  (if (= (modulo (random INVADE-RATE) 56) 0)
      (cons (make-invader (+ INVADER-WIDTH/2
                             (random (- WIDTH (* 2 INVADER-WIDTH/2))))
                          INVADER-HEIGHT/2 1)
            loinvader)
      loinvader))



;; ListOfMissile -> ListOfMissile
;; produce filtered and tickled list of missiles
(check-expect (next-lom empty) empty)
(check-expect (next-lom (list (make-missile 150 300)))
              (list (make-missile 150 (- 300 MISSILE-SPEED))))
(check-expect (next-lom (list (make-missile 150 300)
                              (make-missile 30 120)))
              (list (make-missile 150 (- 300 MISSILE-SPEED))
                    (make-missile  30 (- 120 MISSILE-SPEED))))
(check-expect (next-lom (list (make-missile 150 300)
                              (make-missile 30  0)))
              (list (make-missile 150 (- 300 MISSILE-SPEED)))) ; filter one of the missile

;(define (next-lom lom) lom) ;stub
;<use template from ListOfMissile>

(define (next-lom lom)
  (onscreen-only-missiles (tick-missiles lom)))



;; ListOfMissile -> ListOfMissile
;; produce the next tickled list of missiles
(check-expect (tick-missiles empty) empty)
(check-expect (tick-missiles (list (make-missile 150 300)))
              (list (make-missile 150 (- 300 MISSILE-SPEED))))
(check-expect (tick-missiles (list (make-missile 150 300)
                                   (make-missile 30 0)))
              (list (make-missile 150 (- 300 MISSILE-SPEED))
                    (make-missile  30 (- 0   MISSILE-SPEED))))

;(define (tick-missiles lom) lom) ;stub
;<use template from ListOfMissile>

(define (tick-missiles lom)
  (cond [(empty? lom) empty]
        [else
         (cons (advance-missile (first lom))
               (tick-missiles (rest lom)))]))



;; Missile -> Missile
;; advance missile to the position in next tick
(check-expect (advance-missile (make-missile 150 300)) (make-missile 150 (- 300 MISSILE-SPEED)))
(check-expect (advance-missile (make-missile  30 120)) (make-missile  30 (- 120 MISSILE-SPEED)))

;(define (advance-missile m) m) ;stub
;<use template from Missile>

(define (advance-missile m)
  (make-missile (missile-x m) (- (missile-y m) MISSILE-SPEED)))



;; ListOfMissile -> ListOfMissile
;; produce a list containing only those missiles that are on screen
(check-expect (onscreen-only-missiles empty) empty)
(check-expect (onscreen-only-missiles (list (make-missile 150 300))) (list (make-missile 150 300)))
(check-expect (onscreen-only-missiles (list (make-missile 150 300)
                                            (make-missile 200 (- 0 MISSILE-HEIGHT/2))))
              (list (make-missile 150 300)))

;(define (onscreen-only-missiles lom) lom) ;stub
;<use template from ListOfMissile>

(define (onscreen-only-missiles lom)
  (cond [(empty? lom) empty]
        [else
         (if (onscreen? (first lom))
             (cons (first lom) (onscreen-only-missiles (rest lom)))
             (onscreen-only-missiles (rest lom)))]))



;; Missile -> Boolean
;; produce true if the y coordinate of the missile is larger than (- 0 MISSILE-HEIGHT/2)
(check-expect (onscreen? (make-missile 150 300)) true)
(check-expect (onscreen? (make-missile 200 (- 0 MISSILE-HEIGHT/2))) false)

;(define (onscreen? m) false) ;stub
;<use template from Missile>

(define (onscreen? m)
  (> (missile-y m) (- 0 MISSILE-HEIGHT/2)))



;; Tank -> Tank
;; produce next state of tank with appropriate position and direction
(check-expect (next-tank (make-tank (/ HEIGHT 2) 1))
              (make-tank (+ (* TANK-SPEED 1) (/ HEIGHT 2)) 1)) ; go left
(check-expect (next-tank (make-tank 50 -1))
              (make-tank (+ (* TANK-SPEED -1) 50) -1))         ; go right4
(check-expect (next-tank (make-tank (- (- WIDTH TANK-WIDTH/2) TANK-SPEED) 1))
              (make-tank (- WIDTH TANK-WIDTH/2) 1)) ; barely touch the wall
(check-expect (next-tank (make-tank (- WIDTH TANK-WIDTH/2) 1))
              (make-tank (- WIDTH TANK-WIDTH/2) 1)) ; touch the right wall
(check-expect (next-tank (make-tank TANK-WIDTH/2 -1))
              (make-tank TANK-WIDTH/2 -1))           ; touch the left wall

;(define (next-tank t) t) ;stub
;<use template from Tank>

(define (next-tank t)
  (cond [(<= TANK-WIDTH/2 (+ (* TANK-SPEED (tank-dir t)) (tank-x t)) (- WIDTH TANK-WIDTH/2))
         (make-tank (+ (* TANK-SPEED (tank-dir t)) (tank-x t)) (tank-dir t))] ; middle
        [(> (+ (* TANK-SPEED (tank-dir t)) (tank-x t)) (- WIDTH TANK-WIDTH/2))
         (make-tank (- WIDTH TANK-WIDTH/2) (tank-dir t))]                     ; touch right wall
        [else
         (make-tank TANK-WIDTH/2 (tank-dir t))]))                             ; touch left wall



;; Game -> Image
;; render the current state of space invader game to an image
(check-expect (render-game (make-game empty empty T0))
              (render-invaders empty
                               (render-missiles empty
                                                (render-tank T0))))
(check-expect (render-game (make-game (list I1) (list M1) T1))
              (render-invaders (list I1)
                               (render-missiles (list M1)
                                                (render-tank T1))))

;(define (render-game s) BACKGROUND) ;stub
;<use template from Game>
(define (render-game s)
  (render-invaders (game-invaders s)
                   (render-missiles (game-missiles s)
                                    (render-tank (game-tank s)))))



;; ListOfInvader Image -> Image
;; render the invaders onto the scene that has missiles and tank
(check-expect (render-invaders empty BACKGROUND) BACKGROUND)
(check-expect (render-invaders (list I1) BACKGROUND)
              (place-invader I1 BACKGROUND))
(check-expect (render-invaders (list I1 I2) BACKGROUND)
              (place-invader I1
                             (place-invader I2 BACKGROUND)))

;(define (render-invaders loinvader img) img) ;stub
;<use template from ListOfInvader, plus an image>

(define (render-invaders loinvader img)
  (cond [(empty? loinvader) img]
        [else
         (place-invader (first loinvader)
                        (render-invaders (rest loinvader) img))]))



;; Invader Image -> Image
;; render the invader onto the image
(check-expect (place-invader (make-invader 150 100 12) BACKGROUND)
              (place-image INVADER 150 100 BACKGROUND))
(check-expect (place-invader (make-invader 50 200 10) BACKGROUND)
              (place-image INVADER 50 200 BACKGROUND))

;(define (place-invader invader img) img) ;stub
;<use template from Invader, plus an image>

(define (place-invader invader img)
  (place-image INVADER (invader-x invader) (invader-y invader) img))



;; ListOfMissiles Image -> Image
;; render the missiles onto the scene that has tank
(check-expect (render-missiles empty BACKGROUND) BACKGROUND)
(check-expect (render-missiles (list M1) (render-tank T0))
              (place-missile M1 (render-tank T0)))
(check-expect (render-missiles (list M1 M2) (render-tank T1))
              (place-missile M1
                             (place-missile M2 (render-tank T1))))

;(define (render-missiles lom img) img) ;stub

;<use template from ListOfMissiles, adding an image>
(define (render-missiles lom img)
  (cond [(empty? lom) img]
        [else
         (place-missile (first lom)
                        (render-missiles (rest lom) img))]))



;; Missile Image -> Image
;; render the missile onto the image
(check-expect (place-missile (make-missile 150 300) BACKGROUND)
              (place-image MISSILE 150 300 BACKGROUND))
(check-expect (place-missile (make-missile 50 120) (render-tank T0))
              (place-image MISSILE 50 120 (render-tank T0)))
              
;(define (place-missile m img) img) ;stub
;<use template from Missile, plus an image>

(define (place-missile m img)
  (place-image MISSILE (missile-x m) (missile-y m) img))



;; Tank -> Image
;; render the tank onto the background image
(check-expect (render-tank T0) (place-image TANK (tank-x T0) TANK-Y BACKGROUND))
(check-expect (render-tank T1) (place-image TANK (tank-x T1) TANK-Y BACKGROUND))

;(define (render-tank t) BACKGROUND) ;stub
;<use template from tank>

(define (render-tank t)
  (place-image TANK (tank-x t) TANK-Y BACKGROUND))



;; Game -> Boolean
;; produce true if any one of the invader reaches the bottom of the screen
(check-expect (end-game? G0) false)
(check-expect (end-game? G2) false)
(check-expect (end-game? G3) true)

;(define (end-game? s) false) ;stub
;<use template from Game>

(define (end-game? s)
  (invaders-reach-bottom? (game-invaders s)))



;; ListOfInvader -> Boolean
;; produce true if any one of the invader reaches the bottom of the screen
(check-expect (invaders-reach-bottom? empty) false)
(check-expect (invaders-reach-bottom? LOI3) false)
(check-expect (invaders-reach-bottom? LOI4) true)

;(define (invaders-reach-bottom? loinvader) false) ;stub
;<use template from ListOfInvader>

(define (invaders-reach-bottom? loinvader)
  (cond [(empty? loinvader) false]
        [else
         (or (reach-bottom? (first loinvader))
             (invaders-reach-bottom? (rest loinvader)))]))



;; Invader -> Boolean
;; produce true if the invader reaches the bottom of the screen
(check-expect (reach-bottom? I1) false)
(check-expect (reach-bottom? I2) true)

;(define (reach-bottom? invader) false) ;stub
;<use template from Invader>

(define (reach-bottom? invader)
  (> (invader-y invader) (- HEIGHT INVADER-HEIGHT/2)))



;; Game -> Image
;; Display gameover text on the center of the screen when the game is ended
(check-expect (game-over G0) (overlay (text "GAMEOVER!" 36 "black")
                                      (rectangle 230 40 "solid" "red")
                                      (rectangle 232 42 "solid" "black")
                                      (render-game G0)))
(check-expect (game-over G3) (overlay (text "GAMEOVER!" 36 "black")
                                      (rectangle 230 40 "solid" "red")
                                      (rectangle 232 42 "solid" "black")
                                      (render-game G3)))

;(define (game-over s) BACKGROUND) ;stub
;<use template from Game>

(define (game-over s)
  (overlay (text "GAMEOVER!" 36 "black")
           (rectangle 230 40 "solid" "red")
           (rectangle 232 42 "solid" "black")
           (render-game s)))



;; Game KeyEvent -> Game
;; Change the direction of tank when pressing left/right arrow, produce a missile when pressing space (maximum 5).
(check-expect (handle-key G0 "a") G0)                    ; meaningless key
(check-expect (handle-key G0 "right") G0)                ; right still right
(check-expect (handle-key (make-game empty empty (make-tank 50 -1)) "left")
              (make-game empty empty (make-tank 50 -1))) ; left still left
(check-expect (handle-key (make-game empty empty (make-tank 50 1)) "left")
              (make-game empty empty (make-tank 50 -1))) ; from right to left
(check-expect (handle-key (make-game empty empty (make-tank 50 -1)) "right")
              (make-game empty empty (make-tank 50 1)))  ; from left to right
(check-expect (handle-key (make-game empty empty (make-tank 50 -1)) " ")
              (make-game empty (list (make-missile 50 (- TANK-Y TANK-HEIGHT/2)))
                         (make-tank 50 -1)))  ; fire missile
(check-expect (handle-key (make-game empty (list (make-missile 30 100)) (make-tank 100 -1)) " ")
              (make-game empty (list (make-missile 100 (- TANK-Y TANK-HEIGHT/2))
                                     (make-missile 30 100))
                         (make-tank 100 -1)))  ; fire missile

;(define (handle-key s ke) s) ;stub
;<use template from Game, adding a key> 

(define (handle-key s ke)
  (cond [(key=? ke "left")
         (if (= 1 (tank-dir (game-tank s)))
             (make-game (game-invaders s)
                        (game-missiles s)
                        (make-tank (tank-x (game-tank s)) -1))
             s)]
        [(key=? ke "right")
         (if (= -1 (tank-dir (game-tank s)))
             (make-game (game-invaders s)
                        (game-missiles s)
                        (make-tank (tank-x (game-tank s)) 1))
             s)]
        [(key=? ke " ")
         (if (less-than-five-missiles (game-missiles s))
             (make-game (game-invaders s)
                        (cons (make-missile (tank-x (game-tank s))
                                            (- TANK-Y TANK-HEIGHT/2))
                              (game-missiles s))
                        (game-tank s))
             s)]
        [else s]))



;; ListOfMissile -> Boolean
;; produce true if there are less than 5 missiles in the list
(check-expect (less-than-five-missiles empty) true)
(check-expect (less-than-five-missiles (list M1 M2 M3 M4 M5)) false)

;(define (less-than-five-missiles lom) false) ;stub
;<use template from ListOfMissiles>

(define (less-than-five-missiles lom)
  (< (length lom) 5))